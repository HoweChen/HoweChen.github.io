<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://howechen.github.io/</id>
    <title>Think Different</title>
    <updated>2020-02-16T11:15:46.010Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://howechen.github.io/"/>
    <link rel="self" href="https://howechen.github.io/atom.xml"/>
    <subtitle>Yuhao Chen (Howe) – 陈雨豪</subtitle>
    <logo>https://howechen.github.io/images/avatar.png</logo>
    <icon>https://howechen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Think Different</rights>
    <entry>
        <title type="html"><![CDATA[Setting up MySQL docker container with local connection]]></title>
        <id>https://howechen.github.io/post/setting-up-mysql-docker-container-with-local-connection/</id>
        <link href="https://howechen.github.io/post/setting-up-mysql-docker-container-with-local-connection/">
        </link>
        <updated>2019-10-19T12:27:15.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="scenario">Scenario</h1>
<p>Things happen when I need to have multiple mysql versions on my macbook, and I foudn taht the homebrew's version is not good enough. I cannot start a mysql process. So I want docker to fix the issue.</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="scenario">Scenario</h1>
<p>Things happen when I need to have multiple mysql versions on my macbook, and I foudn taht the homebrew's version is not good enough. I cannot start a mysql process. So I want docker to fix the issue.</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://howechen.github.io//post-images/1571488230838.png" alt="" loading="lazy"></figure>
<h1 id="solution">Solution</h1>
<h2 id="pull-the-latest-mysql-image">Pull the latest mysql image</h2>
<pre><code class="language-shell">
docker pull mysql/mysql-server:latest

</code></pre>
<h2 id="run-docker-container-based-on-docker-image">Run docker container based on docker image</h2>
<pre><code>
docker run --name mysql -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /docker/mysql_data:/var/lib/mysql mysql/mysql:5.6

</code></pre>
<h3 id="parameter-explanation">Parameter explanation</h3>
<p>--name mysql: your container name, I set this to mysql56</p>
<p>-d: run the container at the background and return the contianer ID</p>
<p>-p 3306:3306: former port stands for local port, and latter port is the container port. By default the mysql port on docker container is 3306</p>
<p>-e MYSQL_ROOT_PASSWORD=123456: you can set your own root password</p>
<p>-v /docker/mysql_data:/var/lib/mysql: map the folder in container to the local path, please make sure that on Mac you have permitted the folder in GUI. This is for data persistance usage.</p>
<figure data-type="image" tabindex="2"><img src="https://howechen.github.io//post-images/1571488273990.png" alt="" loading="lazy"></figure>
<p>mysql/mysql:5.6: this defines that I want to use mysql 5.6 version. You can check the tag name you want on the docker hub website.</p>
<p>[optional]--restart always: always restart the ocntainer when the container exit.</p>
<h2 id="check-the-current-running-cotainer">Check the current running cotainer</h2>
<pre><code class="language-shell">
docker ps

</code></pre>
<h2 id="get-into-the-container-with-bash">Get into the container with bash</h2>
<pre><code class="language-shell">

docker exec -it mysql56 bash

mysql -uroot -p

</code></pre>
<h2 id="grant-permission-for-external-login">Grant permission for external login</h2>
<p>You still cannot login to the mysql container externally because for now the mysql only permit user from localhost, e.g. root@localhsot, you need to type:</p>
<pre><code class="language-sql">
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'your_password' WITH GRANT OPTION;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS Mojave Pyenv install multi-version build failed solution]]></title>
        <id>https://howechen.github.io/post/macos-mojave-pyenv-install-multi-version-build-failed-solution/</id>
        <link href="https://howechen.github.io/post/macos-mojave-pyenv-install-multi-version-build-failed-solution/">
        </link>
        <updated>2018-12-09T01:19:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="build-failed">Build Failed</h2>
<p>On macOS Mojave, if you want to install multi-version of python. You might get build failed error.</p>
<p>The error would be like:</p>
<pre><code class="language-shell">BUILD FAILED (OS X 10.14.1 using python-build 20180424)

Inspect or clean up the working tree at /var/folders/wm/hm_v7w195c7ftkk6rjlk9qlc0000gn/T/python-build.20181208174645.70936
Results logged to /var/folders/wm/hm_v7w195c7ftkk6rjlk9qlc0000gn/T/python-build.20181208174645.70936.log

Last 10 log lines:
File &quot;/private/var/folders/wm/hm_v7w195c7ftkk6rjlk9qlc0000gn/T/python-build.20181208174645.70936/Python-3.6.7/Lib/ensurepip/__main__.py&quot;, line 5, in &lt;module&gt;
sys.exit(ensurepip._main())
File &quot;/private/var/folders/wm/hm_v7w195c7ftkk6rjlk9qlc0000gn/T/python-build.20181208174645.70936/Python-3.6.7/Lib/ensurepip/__init__.py&quot;, line 204, in _main
default_pip=args.default_pip,
File &quot;/private/var/folders/wm/hm_v7w195c7ftkk6rjlk9qlc0000gn/T/python-build.20181208174645.70936/Python-3.6.7/Lib/ensurepip/__init__.py&quot;, line 117, in _bootstrap
return _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)
File &quot;/private/var/folders/wm/hm_v7w195c7ftkk6rjlk9qlc0000gn/T/python-build.20181208174645.70936/Python-3.6.7/Lib/ensurepip/__init__.py&quot;, line 27, in _run_pip
import pip._internal
zipimport.ZipImportError: can't decompress data; zlib not available
make: *** [install] Error 1
</code></pre>
<p>On some webpage from StackOverflow, the solution will be used</p>
<pre><code class="language-shell">xcode-select --install
</code></pre>
<p>But this cannot fix the issue on Mojave.</p>
<h2 id="solution">Solution</h2>
<p>I saw this on GitHub, just post a blog to note this command.</p>
<p>On Mojave, just type:</p>
<pre><code class="language-shell">sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
</code></pre>
<p>and then install another environment, like</p>
<pre><code class="language-shell">pyenv install 3.6.7
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Update of Apache Spark and Python 3.6 compatibility]]></title>
        <id>https://howechen.github.io/post/update-of-apache-spark-and-python-36-compatibility/</id>
        <link href="https://howechen.github.io/post/update-of-apache-spark-and-python-36-compatibility/">
        </link>
        <updated>2017-07-28T11:38:32.000Z</updated>
        <summary type="html"><![CDATA[<p>Now the Apache-Spark has released two stable version, 2.1.1 and 2.2.0. The compatibility problem has been solved, you don’t need to try pyenv anymore. Just install apache-spark from home-brew then you may use it.</p>
<p>But if you are going to use python3.6 and your default python in terminal is python2.7, you would find that the REPL would still be the python2.7 version.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Now the Apache-Spark has released two stable version, 2.1.1 and 2.2.0. The compatibility problem has been solved, you don’t need to try pyenv anymore. Just install apache-spark from home-brew then you may use it.</p>
<p>But if you are going to use python3.6 and your default python in terminal is python2.7, you would find that the REPL would still be the python2.7 version.</p>
<!-- more -->
<p>In order to fix that, you should input</p>
<pre><code>sudo PYSPARK_PYTHON=ptipython3 pyspark
</code></pre>
<p>As you can see, I am using ptipython3 as my Python 3 REPL. You can use the default interpreter by changing it to python3 and that will be good for you to use.</p>
<p>Ptpython is a better python interpreter, here is the link:</p>
<p>[github.com/jonathanslenders/ptpython</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[New Server Migration! From Aliyun back to Digital Ocean]]></title>
        <id>https://howechen.github.io/post/new-server-migration-from-aliyun-back-to-digital-ocean/</id>
        <link href="https://howechen.github.io/post/new-server-migration-from-aliyun-back-to-digital-ocean/">
        </link>
        <updated>2017-05-19T12:05:25.000Z</updated>
        <content type="html"><![CDATA[<p>Today I migrated my blog back to the Digital Ocean from Aliyun, I have used Aliyun for a quiet long time and the price is a little bit out of my level to pay monthly. This is the main reason. So this article is about some other more information or knowledge you need to know if you are going to migrate your WordPress Blog to another server.</p>
<p>First you might need to look at this article written by me about <a href="http://www.blog.howechen.com/migration-from-apache-to-nginx-server/">migration from Apache to Nginx server</a>. You may found the most important information you wanna know about.</p>
<p>Also, here are some articles I felt very useful for the migration if you are concerning about the basic security stuff about your server and some other basic linux command you might need to know. Here is the reading list:</p>
<ol>
<li><a href="http://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04">Initial Server Setup with Ubuntu 16.04</a></li>
<li><a href="http://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-in-ubuntu-16-04">How To Install Linux, Nginx, MySQL, PHP (LEMP stack) in Ubuntu 16.04.</a></li>
<li>[How To Install and Secure phpMyAdmin with Nginx on an Ubuntu 14.04 Server.</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fix compatibility of Apache-Spark 2.1.0 with Python 3.6]]></title>
        <id>https://howechen.github.io/post/fix-compatibility-of-apache-spark-210-with-python-36/</id>
        <link href="https://howechen.github.io/post/fix-compatibility-of-apache-spark-210-with-python-36/">
        </link>
        <updated>2017-03-12T12:10:29.000Z</updated>
        <content type="html"><![CDATA[<p>If you are using MacOs Sierra and Homebrew like me, and you want to build comething cool with Apache-Spark and Python3, you would find the compatibility problem while using the pyspark framework. So this article is to tell you how to solve it.</p>
<p>The only way for now is to install Python 3.5 by using Pyenv on Homebrew since the compatibility will be fixed on Apache-Spark 2.2.0 and it hasn’t been released.</p>
<ol>
<li>
<p>Install Pyenv</p>
<ol>
<li>
<p>Supposed that you have install Apache-Spark and Python 3.6 correctly by using the homebrew</p>
</li>
<li>
<p>brew install pyenv</p>
</li>
<li>
<p>Change your shell-rc file</p>
<ol>
<li>
<p>add the following command at the begining of configuation</p>
<pre><code>eval “$(jenv init -)”
</code></pre>
</li>
</ol>
</li>
<li>
<p>Install Python 3.5 (for now the latest version is 3.5.2)</p>
<pre><code>pyenv install python 3.5.2
</code></pre>
</li>
<li>
<p>Change global Python to 3.5.2 instead of 3.6.x</p>
<pre><code>pyenv global 3.5.2
</code></pre>
</li>
</ol>
</li>
<li>
<p>Install pyspark framework by using pip3</p>
<ol>
<li>
<p>So for now your pip would be directed to python 3.5.2</p>
</li>
<li>
<p>Go to your $SPARK_HOME/libexec/python</p>
</li>
<li>
<pre><code>pip3 install -e .
pip2 install -e.
</code></pre>
</li>
<li>
<p>Then you would find that you cannot get to the $SPARK_HOME</p>
<pre><code>brew link –over-write apache-spark
</code></pre>
</li>
<li>
<p>Then happy hacking with pyspark</p>
</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Install GDB in macOS Sierra]]></title>
        <id>https://howechen.github.io/post/install-gdb-in-macos-sierra/</id>
        <link href="https://howechen.github.io/post/install-gdb-in-macos-sierra/">
        </link>
        <updated>2016-10-11T12:13:38.000Z</updated>
        <content type="html"><![CDATA[<p>I found that there was no GDB pre-installed inside the macOS (was called OSX) since very long time ago. So this article is talking about how to install GDB in macOS Sierra.</p>
<p>First, you need to install <a href="http://brew.sh/">homebrew</a></p>
<p>Then, install gdb by typing</p>
<blockquote>
<p>brew install gdb</p>
</blockquote>
<p>or</p>
<blockquote>
<p>sudo brew install gdb</p>
</blockquote>
<p>But if you are using gdb right now to debug your code, you will find that the terminal will tell you:</p>
<blockquote>
<p>Error message from debugger back end: Unable to find Mach task port for process–id 46234: (os/kern) failure (0x5). (please check gdb is codesigned – see taskgated(8)</p>
</blockquote>
<p>That is because you haven’t code-sign your own installed gdb yet, so here are two ways to do it.</p>
<ol>
<li><a href="http://www.patosai.com/posts/2015/03/24/installing-gdb-on-os-x-yosemite">Code-sign your own gdb.</a></li>
<li>Let superuser do the job, so it will jump through this certification.</li>
</ol>
<p>For the solution two, just type:</p>
<blockquote>
<p>sudo gdb</p>
</blockquote>
<p>and it will solve your problem.</p>
<p>Also, you can edit your bash profile or zsh profile to add the alias</p>
<blockquote>
<p>alias gdb=”sudo gdb”</p>
</blockquote>
<p>then there is no need to type sudo every time, but if you want it to be safe, you can do type sudo every time.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migration from Apache to Nginx server]]></title>
        <id>https://howechen.github.io/post/migration-from-apache-to-nginx-server/</id>
        <link href="https://howechen.github.io/post/migration-from-apache-to-nginx-server/">
        </link>
        <updated>2015-11-17T12:07:28.000Z</updated>
        <content type="html"><![CDATA[<p>In this article I will generate the solution of migration from Apache to Nginx server with your wordpress or other web app.</p>
<p>I am using digital ocean VPS as my blog server. I had been using the Singapore line for a year and the lag was to much for me and also, the shadowsocks service was not good for it. So I decided to change the server to San Francisco.</p>
<p>Last night I just migrated my server to the new one. I also use LEMP as my server framework instead of LAMP.</p>
<p>Here is my experience of migrating the wordpress from Apache to Nginx server, I met some problems but I have fixed them so I want to post an artical about it.</p>
<ol>
<li>
<p><a href="http://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04">Install LEMP</a></p>
</li>
<li>
<p>Export your wordpress or other app database and import to your new server by using phpmyadminYou might meet the problem of the upload max size.</p>
<ul>
<li>Choose export with compress option</li>
<li>Change the max size of uploading file for the server(if your compressed file is also too big for the default server upload setting)</li>
</ul>
<p><a href="http://rtcamp.com/tutorials/php/increase-file-upload-size-limit/">//rtcamp.com/tutorials/php/increase-file-upload-size-limit/</a></p>
<p>This website will tell you what you need to do.</p>
</li>
<li>
<p>Compress your wordpress or other app and upload to your new server.</p>
</li>
<li>
<p>Import database to your new server by using phpmyadmin. (Note: You need to create a new database which has the same name as your old server.)Enter your new database and import your database.After that you might still cannot open your blog which might display database error, you need to check the privilege of your wordpress database, and you will find that you lost a wordpress user for your database, check the wp-config.php inside your wordpress folder, find the DB_USER and create a new user of your database, for me it is like this:</p>
<p>after that, you can open your blog without your specify website address.when you update your theme or plugin you will find that you need to offer your server’s ftp username and password, if you don’t know you will not to update.The way to solve it is to add a line in the wp-config.php:</p>
<pre><code>define('FS_METHOD', 'direct');
</code></pre>
<p>This might not be the safest way, but it can solve the problem.</p>
</li>
<li>
<p>Bind your server with the domain name</p>
</li>
</ol>
<p>If you are using Nginx as me, you need to define a new domain name setting under the sites-available folder:</p>
<p>The format is simply declared in the default setting file. I will show you some example of it:</p>
<pre><code>##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# //wiki.nginx.org/Pitfalls
# //wiki.nginx.org/QuickStart
# //wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
    listen 80;
    listen [::]:80;

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: //bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: //bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    root your_web_app_folder;

    # Add index.php to the list if you are using PHP
    index index.php index.html index.htm;

    server_name your_domain_name;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ /index.php;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    # location ~ \.php$ {
    # 	include snippets/fastcgi-php.conf;
    #
    # 	# With php5-cgi alone:
    # 	fastcgi_pass 127.0.0.1:9000;
    # 	# With php5-fpm:
    # 	fastcgi_pass unix:/var/run/php5-fpm.sock;
    # }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    # location ~ /\.ht {
    #     deny all;
    # }
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;

    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;

    }
}
</code></pre>
<p>You may find that I set the</p>
<pre><code>    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ /index.php;
    }
</code></pre>
<p>The reason that I set index.php is that I changed the permalinks of wordpress so the SEO plugin would map my sebsite better then before. But under Nginx you will find that the old posts will not be open so I found the solution in <a href="http://wordpress.org/support/topic/permalinks-nginx-not-working-help-required">here</a>.</p>
<p>Change to index.php will help you solve this problem.</p>
<p>I also create the new Nginx setting to solve my website’s domain name Skyfather1994.com, and blog.skyfather1994.com point to my blog.</p>
<p>So basically the migration of my server and web app(in this case is wordpress) from Apache to Nginx was done.</p>
<p>Also, you might find that you cannot open your blog but download a index.php of your wordpress folder, this problem annoyed me for more than an hour, the way to solve it is to clear the browser’s cache, pretty dumb and simple question.= =</p>
<p>Hope this post will help you figure out your problem.</p>
]]></content>
    </entry>
</feed>